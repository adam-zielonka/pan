import { Card, Color, Figure } from '../../new-engine/Card'

describe('Card', () => {
  it('figureToString()', () => {
    expect(Card.figureToString(Figure.f9)).toBe('9')
    expect(Card.figureToString(Figure.f10)).toBe('10')
    expect(Card.figureToString(Figure.J)).toBe('J')
    expect(Card.figureToString(Figure.Q)).toBe('Q')
    expect(Card.figureToString(Figure.K)).toBe('K')
    expect(Card.figureToString(Figure.A)).toBe('A')
  })
  it('colorToString()', () => {
    expect(Card.colorToString(Color.Kier)).toBe('♥')
    expect(Card.colorToString(Color.Pik)).toBe('♠')
    expect(Card.colorToString(Color.Trefl)).toBe('♣')
    expect(Card.colorToString(Color.Karo)).toBe('♦')
  })
  it('get colorStyle()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.colorStyle).toBe('red')
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.colorStyle).toBe('black')
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.colorStyle).toBe('black')
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.colorStyle).toBe('red')
  })
  it('get text()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.text).toBe('9♥')
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.text).toBe('9♠')
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.text).toBe('9♣')
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.text).toBe('9♦')
  })
  it('get colorText()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.colorText).toBe('♥')
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.colorText).toBe('♠')
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.colorText).toBe('♣')
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.colorText).toBe('♦')
  })
  it('get figureText()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.figureText).toBe('9')
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.figureText).toBe('9')
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.figureText).toBe('9')
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.figureText).toBe('9')
  })
  it('get isPik()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.isPik).toBe(false)
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.isPik).toBe(true)
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.isPik).toBe(false)
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.isPik).toBe(false)
  })
  it('get isStartCard()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    expect(card.isStartCard).toBe(true)
    const card2 = new Card(Figure.f9, Color.Pik)
    expect(card2.isStartCard).toBe(false)
    const card3 = new Card(Figure.f9, Color.Trefl)
    expect(card3.isStartCard).toBe(false)
    const card4 = new Card(Figure.f9, Color.Karo)
    expect(card4.isStartCard).toBe(false)
  })
  it('isEqual()', () => {
    const card = new Card(Figure.f9, Color.Kier)
    const card2 = new Card(Figure.f9, Color.Kier)
    expect(card.isEqual(card2)).toBe(true)
    const card3 = new Card(Figure.f9, Color.Pik)
    expect(card.isEqual(card3)).toBe(false)
  })
  it('compareFigures()', () => {
    const card = new Card(Figure.J, Color.Kier)
    const card2 = new Card(Figure.J, Color.Karo)
    expect(card.compareFigures(card2)).toBe(0)
    const card3 = new Card(Figure.K, Color.Kier)
    expect(card.compareFigures(card3)).toBe(-1)
    const card4 = new Card(Figure.f9, Color.Kier)
    expect(card.compareFigures(card4)).toBe(1)
  })
  it('compare()', () => {
    const card = new Card(Figure.J, Color.Karo)
    const card2 = new Card(Figure.J, Color.Karo)
    expect(card.compare(card2)).toBe(0)
    const card3 = new Card(Figure.J, Color.Pik)
    expect(card.compare(card3)).toBe(-1)
    const card4 = new Card(Figure.J, Color.Kier)
    expect(card.compare(card4)).toBe(1)
    const card5 = new Card(Figure.f9, Color.Karo)
    expect(card.compare(card5)).toBe(1)
    const card6 = new Card(Figure.K, Color.Karo)
    expect(card.compare(card6)).toBe(-1)
  })
})
